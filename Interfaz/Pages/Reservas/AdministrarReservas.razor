@page "/Administrar/Reservas"
@inherits AuthEnforce
@using Dominio
@using Data
@inject Usuarios UsuarioServicios;
@inject Reservas ReservaServicio;
@inject NavigationManager NavigationManager;

@if(UsuarioServicios.IsSignedIn)
{
    @if(UsuarioServicios.GetCurrentUser.EsAdmin)
    {
        <div class="container">
            <h1>Administrar Reservas Activas</h1>


            <table class="table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Comienzo</th>
                        <th>Fin</th>
                        <th>Costo</th>
                        <th>Deposito</th>
                        <th>Email</th>
                        <th>Estado</th>
                        <th>Revisar</th>

                    </tr>
                </thead>
                <tbody>
                    @foreach (Reserva reserva in reservas)
                    {
                        <tr>
                            <td>@reserva.ID</td>
                            <td>@reserva.Comienzo.ToString("d")</td>
                            <td>@reserva.Fin.ToString("d")</td>
                            <td>@reserva.Costo.ToString("C")</td>
                            <td><button @onclick="() => VerInfo(reserva.Deposito)" class="btn btn-info">Info deposito</button></td>
                            <td>@reserva.Usuario.Email</td>
                            <td><button @onclick="() => VerEstadoReserva(reserva)" class="btn btn-secondary">Ver Estado Solicitud</button></td>
                            @if (reserva.EnEspera)
                            {
                                <td><button @onclick="() => RevisarReserva(reserva)" class="btn btn-primary">Aprobar/Rechazar Reserva</button></td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <p role="alert">Pagina No encontrada</p>
    }
}

@code {

    private IList<Reserva> reservas = new List<Reserva>();

    private void CargarReservas()
    {
        reservas = ReservaServicio.GetReservasActivas();
        StateHasChanged();
    }

   

    protected override void OnInitialized()
    {
        CargarReservas();
    }

    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    private async Task VerInfo(Deposito depo)
    {
        var parameters = new ModalParameters().Add(nameof(ModalInfoDeposito.depo), depo);
        var messageForm = Modal.Show<ModalInfoDeposito>("Datos del deposito", parameters);
        var result = await messageForm.Result;
        if (result.Data != null && result.Data.ToString() == "ErrorAuth")
        {
            NavigationManager.NavigateTo("/IniciarSesion", true);
        }
    }

    private async Task VerEstadoReserva(Reserva res)
    {
        var parameters = new ModalParameters().Add(nameof(ModalEstadoReserva.res), res);
        var messageForm = Modal.Show<ModalEstadoReserva>("Estado de la reserva", parameters);
        var result = await messageForm.Result;
        if (result.Data != null && result.Data.ToString() == "ErrorAuth")
        {
            NavigationManager.NavigateTo("/IniciarSesion", true);
        }
    }

    private async Task RevisarReserva(Reserva res)
    {
        var parameters = new ModalParameters().Add(nameof(ModalRevisarReserva.res), res);
        var messageForm = Modal.Show<ModalRevisarReserva>("Revisar Reserva", parameters);
        var result = await messageForm.Result;
        if (result.Data != null && result.Data.ToString() == "ErrorAuth")
        {
            NavigationManager.NavigateTo("/IniciarSesion", true);
        }
        CargarReservas();
    }
}
