@page "/Reservas"
@attribute [Authorize(Roles = "Admin, User")]
@using BlazorServerAuthenticationAndAuthorization.Authentication
@using Dominio
@using Data
@using System.Security.Claims
@inject Usuarios UsuarioServicio;
@inject Reservas ReservaServicio;
@inject AuthenticationStateProvider authStateProvider;
<div class="container">
    <h1>Mis Reservas</h1>
</div>

<table class="table">
    <thead>
        <tr>
            <th>ID</th>
            <th>Comienzo</th>
            <th>Fin</th>
            <th>Costo</th>
            <th>Aprobada</th>
            <th>EnEspera</th>
            <th>Mensaje</th>
        </tr>
    </thead>
    <tbody>
        @foreach (Reserva reserva in reservas)
        {
            <tr>
                <td>@reserva.ID</td>
                <td>@reserva.Comienzo</td>
                <td>@reserva.Fin</td>
                <td>@reserva.Costo</td>
                <td>@reserva.Aprobada</td>
                <td>@reserva.EnEspera</td>
                <td>@reserva.Mensaje</td>
                <td>
                    <button class="btn btn-warning">Editar</button>
                    <button class="btn btn-danger">Eliminar</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }
    private IList<Reserva> reservas = new List<Reserva>();
    private Usuario usuario;
    private async Task CargarReservas()
    {
        reservas = await Task.Run(() => ReservaServicio.Logica.GetReservasUsuario(usuario));
        //StateHasChanged();
        Console.WriteLine("Reservas: " + reservas.Count);
    }

    private async Task CargarUsuario()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        var authenticationState = await customAuthStateProvider.GetAuthenticationStateAsync();
        string userEmail = "";
        await Task.Run(() => userEmail = authenticationState.User.FindFirst(ClaimTypes.Email)?.Value);
        await Task.Run(() =>
       {
           usuario = UsuarioServicio.Logica.GetUsuario(userEmail);
           Console.WriteLine("Usuario: "+userEmail);
       });
    }

    protected override async Task OnInitializedAsync()
    {
        await CargarUsuario();
        await CargarReservas();
    }
}
