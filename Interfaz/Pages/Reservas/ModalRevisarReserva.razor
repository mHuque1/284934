@using BlazorServerAuthenticationAndAuthorization.Authentication
@using Data;
@using Dominio;
@using System.Security.Claims
@attribute [Authorize(Roles = "Admin, User")]

@inject Reservas reservaServicio
@inject Usuarios UsuarioServicios
@inject AuthenticationStateProvider authStateProvider

<div class="container">
    <div class="text-center">
        <input type="checkbox" @bind="AprobarReserva" />
        <span>Aprobar reserva</span>
        @if (!AprobarReserva)
        {
            <hr />
            <div class="form-group">
                <label for="mensaje">Mensaje:</label>
                <textarea class="form-control" aria-label="Mensaje" @bind="Mensaje" style="height:30vh"></textarea>
                @if (MostrarErrorMensaje)
                {
                    <div class="text-danger">El mensaje no puede estar vacío.</div>
                }
            </div>
        }
        <div class="form-group">
            <button class="btn btn-success mt-3" @onclick="Confirmar">Confirmar</button>
        </div>
    </div>
</div>

@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;
    [Parameter] public Reserva res { get; set; }
    private bool AprobarReserva { get; set; } = true;
    private string Mensaje { get; set; } = "";
    private Usuario user;
    private bool MostrarErrorMensaje { get; set; }

    private async Task<bool> CargarUsuario()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        var authenticationState = await customAuthStateProvider.GetAuthenticationStateAsync();
        string userEmail = "";
        await Task.Run(() => userEmail = authenticationState.User.FindFirst(ClaimTypes.Email)?.Value);

        if (string.IsNullOrEmpty(userEmail))
        {
            Console.WriteLine("ErrorAuth");
            await BlazoredModal.CloseAsync(ModalResult.Cancel("ErrorAuth"));
            return false;
        }
        else
        {
            await Task.Run(() =>
            {
                user = UsuarioServicios.Logica.GetUsuario(userEmail);
                Console.WriteLine("Usuario: " + userEmail);

            });
            if (user == null)
            {
                await BlazoredModal.CloseAsync(ModalResult.Cancel("ErrorAuth"));
                return false;
            }
        }

        return true;
    }

    private async Task Aprobar()
    {
        await Task.Run(() =>
        {
            res.Aprobar(user);
            reservaServicio.Logica.ModificarReserva(res.ID, res);
        });

    }

    private async Task Rechazar()
    {
        await Task.Run(() =>
        {
            res.Rechazar(user, Mensaje);
            reservaServicio.Logica.ModificarReserva(res.ID, res);
        });

    }

    private async Task Confirmar()
    {
        if (await CargarUsuario())
        {
            
            

            if (AprobarReserva)
            {

                await Aprobar();
                await BlazoredModal.CloseAsync(ModalResult.Ok());
            }
            else
            {
                if (string.IsNullOrWhiteSpace(Mensaje))
                {
                    MostrarErrorMensaje = true;
                    return;
                }
                else
                {
                    MostrarErrorMensaje = false;
                    await Rechazar();
                    await BlazoredModal.CloseAsync(ModalResult.Ok());
                }
                
            }

            
        }
    }
}

