@using Data;
@using Dominio;

@inject Reservas reservaServicio
@inject Usuarios UsuarioServicios
@inject AuthenticationStateProvider authStateProvider

<div class="container">
    <div class="text-center">
        <input type="checkbox" @bind="AprobarReserva" />
        <span>Aprobar reserva</span>
        @if (!AprobarReserva)
        {
            <hr />
            <div class="form-group">
                <label for="mensaje">Mensaje:</label>
                <textarea class="form-control" aria-label="Mensaje" @bind="Mensaje" style="height:30vh"></textarea>
                @if (MostrarErrorMensaje)
                {
                    <div class="text-danger">El mensaje no puede estar vacío.</div>
                }
            </div>
        }
        <div class="form-group">
            <button class="btn btn-success mt-3" @onclick="Confirmar">Confirmar</button>
        </div>
    </div>
</div>

@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;
    [Parameter] public Reserva res { get; set; }
    private bool AprobarReserva { get; set; } = true;
    private string Mensaje { get; set; } = "";
    private bool MostrarErrorMensaje { get; set; }



    private void Aprobar() => reservaServicio.AprobarReserva(res,UsuarioServicios.GetCurrentUser);

    private void Rechazar() => reservaServicio.RechazarReserva(res, UsuarioServicios.GetCurrentUser,Mensaje);

    private async Task Confirmar()
    {
        if(AprobarReserva) {
            Aprobar();
            await BlazoredModal.CloseAsync(ModalResult.Ok());
        }
        else
        {
            if (string.IsNullOrWhiteSpace(Mensaje))
            {
                MostrarErrorMensaje = true;
                return;
            }
            else
            {
                MostrarErrorMensaje = false;
                Rechazar();
                await BlazoredModal.CloseAsync(ModalResult.Ok());
            }
        } 
    }
}

