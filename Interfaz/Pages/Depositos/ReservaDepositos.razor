@page "/Depositos"
@using Data
@using Dominio
@inject Usuarios UsuarioServicios
@inject Reservas ReservaServicio
@inject Depositos depositosServicio
@inject NavigationManager NavigationManager
@inherits AuthEnforce

<PageTitle>Depositos</PageTitle>



@if(UsuarioServicios.IsSignedIn)
{
    <div class="container">
        <h1>Depositos</h1>
        @if (UsuarioServicios.GetCurrentUser.EsAdmin)
        {
            <button @onclick="Agregar" class="btn btn-success btn-lg">Agregar</button>
        }


        <table class="table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Area</th>
                    <th>Tamaño</th>
                    <th>Tiene Climatizacion</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (Deposito depo in depositos)
                {
                    <tr>
                        <td>@depo.ID</td>
                        <td>@depo.Area</td>
                        <td>@TamanoTexto(depo.Tamano)</td>
                        <td>@(depo.TieneClimatizacion ? "Sí" : "No")</td>


                        <td>
                            <button @onclick="() => Reservar(depo)" class="btn btn-primary">Reservar</button>
                            @if (UsuarioServicios.GetCurrentUser.EsAdmin)
                            {
                                <button @onclick="() => Borrar(depo)" class="btn btn-danger">Eliminar</button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}



@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    private IList<Deposito> depositos = new List<Deposito>();

    protected override void OnInitialized()
    {
        CargarDepositos();
    }

    private string TamanoTexto(char tamano)
    {
        switch (tamano)
        {
            case 'S':
                return "Pequeño";
            case 'M':
                return "Mediano";
            case 'L':
                return "Grande";
            default:
                return "Desconocido";
        }
    }

    private void CargarDepositos() => depositos = depositosServicio.ListaDepositos;


    private async Task Agregar()
    {
        var messageForm = Modal.Show<ModalAgregarDeposito>("Agregar Deposito");
        var result = await messageForm.Result;
        CargarDepositos();
    }

    private async Task Reservar(Deposito depo)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(ModalReservarDeposito.depo), depo);
        parameters.Add(nameof(ModalReservarDeposito.user), UsuarioServicios.GetCurrentUser);
        var messageForm = Modal.Show<ModalReservarDeposito>("Reservar Deposito", parameters);
        var result = await messageForm.Result;
        CargarDepositos();
    }

    private async Task Borrar(Deposito depo)
    {
        var parameters = new ModalParameters().Add(nameof(ModalBorrarDeposito.depo), depo);
        var messageForm = Modal.Show<ModalBorrarDeposito>("Borrar Deposito", parameters);
        var result = await messageForm.Result;
        CargarDepositos();
    }
}
