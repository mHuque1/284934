@using Data
@using Dominio
@using System.ComponentModel.DataAnnotations

@inject Depositos depositosServicio
@inject Reservas reservasServicio
@inject Usuarios UsuarioServicios
@inject AuthenticationStateProvider authStateProvider

<EditForm Model="@model" OnValidSubmit="Confirmar">
    <DataAnnotationsValidator />
    <div class="container d-flex justify-content-center align-items-center">
        <div class="text-center">
            <div class="row">
                <div class="form-group">
                    <label for="fechaInicio">Fecha de inicio de la Reserva:</label>
                    <input type="date" class="form-control" id="fechaInicio" @bind="model.Comienzo" min="@DateTime.Today.ToString("yyyy-MM-dd")" />
                    <ValidationMessage For="@(() => model.Comienzo)" />
                </div>

                <div class="form-group">
                    <label for="fechaFin">Fecha de Fin de la Reserva:</label>
                    <input type="date" class="form-control" id="fechaFin" @bind="model.Fin" min="@DateTime.Today.ToString("yyyy-MM-dd")" />
                    <ValidationMessage For="@(() => model.Fin)" />
                </div>

                <div>
                    <hr />
                    <br />
                    <button type="button" @onclick="CalcularCosto" class="btn btn-primary">Calcular Costo</button>
                    <br />
                    @if (MostrarErrorFecha)
                    {
                        <p class="text-danger">La fecha de inicio no puede ser mayor que la fecha de fin.</p>
                    }
                    <h3>Costo: @costo.ToString("C")</h3>
                </div>
            </div>
        </div>
    </div>
    <hr />
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Confirmar</button>
    </div>
</EditForm>

@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;
    [Parameter] public Deposito depo { get; set; }
    [Parameter] public Usuario user { get; set; }
    private double costo = 0;
    private ReservaModelo model = new ReservaModelo();
    private bool click = false;
    private bool MostrarErrorFecha = false;

    private async Task Cancelar()
    {
        await BlazoredModal.CancelAsync();
    }

   

    private async Task Confirmar()
    {
        if (!click)
        {
            click = true;
            Reserva res = new(depo, user, model.Comienzo, model.Fin);
            reservasServicio.AddReserva(res);
            await BlazoredModal.CloseAsync(ModalResult.Ok());
        }
    }

    private async Task CalcularCosto()
    {
        Reserva res = new(depo, user, model.Comienzo, model.Fin);
        MostrarErrorFecha = model.Comienzo > model.Fin;
        costo = MostrarErrorFecha ? 0 : res.Costo;
    }

    public class ReservaModelo
    {
        [Required(ErrorMessage = "La fecha de comienzo es obligatoria.")]
        [DateGreaterOrEqualThanToday(ErrorMessage = "La fecha de comienzo debe ser mayor o igual que el día actual.")]
        public DateTime Comienzo { get; set; } = DateTime.Today;

        [Required(ErrorMessage = "La fecha de fin es obligatoria.")]
        [DateGreaterOrEqualThanStart(ErrorMessage = "La fecha de fin debe ser mayor o igual que la fecha de comienzo.")]
        public DateTime Fin { get; set; } = DateTime.Today;
    }

    public class DateGreaterOrEqualThanToday : ValidationAttribute
    {
        public override bool IsValid(object value)
        {
            if (value is DateTime dateValue)
            {
                return dateValue.Date >= DateTime.Today;
            }

            return false;
        }
    }

    public class DateGreaterOrEqualThanStart : ValidationAttribute
    {
        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            var model = (ReservaModelo)validationContext.ObjectInstance;

            if (value is DateTime dateValue && dateValue >= model.Comienzo)
            {
                return ValidationResult.Success;
            }

            return new ValidationResult(ErrorMessage ?? "La fecha de fin debe ser mayor o igual que la fecha de comienzo.", new[] { validationContext.MemberName });
        }
    }
}
