@page "/IniciarSesion"
@using System.ComponentModel.DataAnnotations;
@using BlazorServerAuthenticationAndAuthorization.Authentication
@using Dominio
@using Microsoft.AspNetCore.Authentication.Cookies
@using System.Security.Claims
@using Data
@inject Usuarios UsuarioServicios;
@inject AuthenticationStateProvider authStateProvider;
@inject NavigationManager NavigationManager;

<PageTitle>Iniciar Sesión</PageTitle>

<h1 class="text-center">Iniciar Sesión</h1>

@if (!InicioSesionValido)
{
    <div class="alert alert-danger" role="alert">
        El correo electrónico o la contraseña no son correctos.
    </div>
}

<EditForm Model="@model" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />

    <div class="container d-flex justify-content-center">
        <div class="col-md-6">
            <div class="form-group">
                <label for="email">Correo electrónico:</label>
                <InputText id="email" class="form-control" @bind-Value="model.Email" />
                <ValidationMessage For="@(() => model.Email)" />
            </div>

            <div class="form-group">
                <label for="password">Contraseña:</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="model.Password" />
                <ValidationMessage For="@(() => model.Password)" />
            </div>

            <button class="btn btn-primary btn-block">Iniciar Sesión</button>

            <p class="mt-3 text-center">¿No tienes una cuenta? <a href="/Registro">Regístrate aquí</a></p>
        </div>
    </div>
</EditForm>

@code {
    private LoginModel model = new LoginModel();
    private bool InicioSesionValido = true;

    private async Task<bool> CargarUsuario()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        var authenticationState = await customAuthStateProvider.GetAuthenticationStateAsync();
        string userEmail = authenticationState.User.FindFirst(ClaimTypes.Email)?.Value;

        if (string.IsNullOrEmpty(userEmail))
            return false;

        Usuario user = UsuarioServicios.Logica.GetUsuario(userEmail);
        return user != null;
    }

    private async Task HandleValidSubmit()
    {
        InicioSesionValido = UsuarioServicios.Logica.ValidarInicioSesion(model.Email, model.Password);
        if (InicioSesionValido)
        {
            Usuario user = UsuarioServicios.Logica.GetUsuario(model.Email);
            var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(new UserSession
                {
                    UserName = user.Nombre,
                    Email = user.Email,
                    Role = user.EsAdmin ? "Admin" : "User"
                });
            NavigationManager.NavigateTo("/", true);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (await CargarUsuario())
        {
            NavigationManager.NavigateTo("/", true);
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "El correo electrónico es obligatorio.")]
        public string Email { get; set; }

        [Required(ErrorMessage = "La contraseña es obligatoria.")]
        public string Password { get; set; }
    }
}
