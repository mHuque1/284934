@using Data;
@using Dominio;
@inject Promociones promocionesServicio // Inyectar el servicio Promociones
<div class="container">
    <div class="form-group">
        <label for="nombreEtiqueta">Nombre de la etiqueta de la promoción:</label>
        <input type="text" class="form-control" id="nombreEtiqueta" @bind="nombreEtiqueta" />
    </div>

    <div class="form-group">
        <label for="porcentajeDescuento">Porcentaje de descuento:</label>
        <input type="number" class="form-control" id="porcentajeDescuento" @bind="porcentajeDescuento" />
    </div>

    <div class="form-group">
        <label for="fechaInicio">Fecha de inicio de la promoción:</label>
        <input type="date" class="form-control" id="fechaInicio" @bind="fechaInicio" />
    </div>

    <div class="form-group">
        <label for="fechaFin">Fecha de fin de la promoción:</label>
        <input type="date" class="form-control" id="fechaFin" @bind="fechaFin" />
    </div>

    <div class="form-group">
        <label for="tipoDeposito">Tipo de depósito:</label>
        <select class="form-control" id="tipoDeposito" @bind="tipoDeposito">
            <option value="S">Pequeño</option>
            <option value="M">Mediano</option>
            <option value="L">Grande</option>
        </select>
    </div>

    <br />
    <div class="form-group">
        <button type="button" class="btn btn-primary" @onclick="Confirmar">Confirmar</button>
    </div>
    <div style="color: red;" id="ErrorMessage">@errorMessage</div>
</div>

@code {

    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;
    [Parameter] public Promocion promo { get; set; }

    private int porcentajeDescuento;
    private string nombreEtiqueta;
    private DateTime fechaInicio;
    private DateTime fechaFin;
    private char tipoDeposito;
    private string errorMessage = ""; // Variable para almacenar el mensaje de error

    protected override void OnInitialized()
    {
        base.OnInitialized();
        porcentajeDescuento = promo.Descuento;
        nombreEtiqueta = promo.Etiqueta;
        fechaInicio = promo.Comienzo;
        fechaFin = promo.Fin;
        tipoDeposito = promo.TipoDeposito;
    }

    private void MostrarError(string mensaje)
    {
        errorMessage = mensaje; // Asignar el mensaje de error a la variable
    }

    private void LimpiarError()
    {
        errorMessage = ""; // Limpiar el mensaje de error
    }

    private bool ValidarDescuento()
    {
        if (porcentajeDescuento < 5 || porcentajeDescuento > 75)
        {
            MostrarError("El porcentaje de descuento debe estar entre 5 y 75.");
            return false;
        }

        LimpiarError();
        return true;
    }

    private bool ValidarEtiqueta()
    {
        if (string.IsNullOrWhiteSpace(nombreEtiqueta))
        {
            MostrarError("El nombre de la etiqueta no puede estar vacío.");
            return false;
        }

        if (nombreEtiqueta.Length > 20)
        {
            MostrarError("El nombre de la etiqueta no puede tener más de 20 caracteres.");
            return false;
        }

        LimpiarError();
        return true;
    }

    private bool ValidarFechas()
    {
        if (fechaInicio == DateTime.MinValue || fechaFin == DateTime.MinValue)
        {
            MostrarError("Las fechas de inicio y fin deben estar completas.");
            return false;
        }

        if (fechaInicio > fechaFin)
        {
            MostrarError("La fecha de inicio no puede ser mayor que la fecha de fin.");
            return false;
        }

        LimpiarError();
        return true;
    }

    private bool ValidarTipoDeposito()
    {
        if (tipoDeposito != 'S' && tipoDeposito != 'M' && tipoDeposito != 'L')
        {
            MostrarError("El tipo de depósito debe ser S,M o L");
            return false;
        }

        LimpiarError();
        return true;
    }

    private async void Confirmar()
    {
        if (ValidarEtiqueta() && ValidarDescuento() && ValidarFechas() && ValidarTipoDeposito())
        {
            await Task.Run(() =>
            {
                Promocion promocion = new(nombreEtiqueta, porcentajeDescuento, fechaInicio, fechaFin, tipoDeposito);
                promocionesServicio.Logica.ModificarPromocion(promo.Id, promocion);
            });

            await Aceptar();
        }
    }

    private async Task Aceptar() => await BlazoredModal.CloseAsync(ModalResult.Ok());
}
