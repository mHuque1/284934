@using BlazorServerAuthenticationAndAuthorization.Authentication
@using Data;
@using Dominio;
@using System.Security.Claims
@inject Promociones PromocionesServicio
@inject Usuarios UsuarioServicios
@inject AuthenticationStateProvider authStateProvider

<div class="container d-flex justify-content-center align-items-center">
    <div class="text-center">
        <h3>¿Estás seguro de que deseas borrar?</h3>
        <p>@promo.Etiqueta</p>
        <p>Esta acción no se puede deshacer.</p>
        <button class="btn btn-success" @onclick="Confirmar">Confirmar</button>
        <button class="btn btn-danger" @onclick="Cancelar">Cancelar</button>
    </div>
</div>

@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;
    [Parameter] public Promocion promo { get; set; }
    private static Usuario user;

    private async Task<bool> CargarUsuario()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        var authenticationState = await customAuthStateProvider.GetAuthenticationStateAsync();
        string userEmail = "";
        await Task.Run(() => userEmail = authenticationState.User.FindFirst(ClaimTypes.Email)?.Value);

        if (string.IsNullOrEmpty(userEmail))
        {
            Console.WriteLine("ErrorAuth");
            await BlazoredModal.CloseAsync(ModalResult.Cancel("ErrorAuth"));
            return false;
        }
        else
        {
            await Task.Run(() =>
            {
                user = UsuarioServicios.Logica.GetUsuario(userEmail);
                Console.WriteLine("Usuario: " + userEmail);

            });
            if (user == null)
            {
                await BlazoredModal.CloseAsync(ModalResult.Cancel("ErrorAuth"));
                return false;
            }
        }

        return true;
    }

    private async Task Cancelar()
    {
        await BlazoredModal.CancelAsync();
    }

    private async Task Confirmar()
    {
        if (await CargarUsuario())
        {
            await Task.Run(() =>
            {
                PromocionesServicio.Logica.DeletePromocion(promo.Id, promo, user);
            });
            await BlazoredModal.CloseAsync(ModalResult.Ok());
        }
    }
}
