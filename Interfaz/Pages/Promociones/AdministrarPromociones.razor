@page "/Administrar/Promociones"
@inject Usuarios UsuarioServicios;
@inject AuthenticationStateProvider authStateProvider;
@inject NavigationManager NavigationManager;
@attribute [Authorize(Roles = "Admin")]
<PageTitle>Promociones</PageTitle>

@using BlazorServerAuthenticationAndAuthorization.Authentication
@using Data;
@using Dominio;
@using System.Security.Claims
@inject Promociones promocionesServicio;

<div class="container">
    <h1>Administrar Promociones</h1>

    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Etiqueta</th>
                <th>Descuento</th>
                <th>Comienzo</th>
                <th>Fin</th>
                <th>Tipo Deposito</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (Promocion promo in promociones)
            {
                <tr>
                    <td>@promo.Id</td>
                    <td>@promo.Etiqueta</td>
                    <td>@string.Concat(promo.Descuento, "%")</td>
                    <td>@promo.Comienzo</td>
                    <td>@promo.Fin</td>
                    <td>@promo.TipoDeposito</td>
                    <td>
                        <button @onclick="() => Modificar(promo)" class="btn btn-warning">Editar</button>
                        <button @onclick="() => Borrar(promo)" class="btn btn-danger">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <button @onclick="Agregar" class="btn btn-success btn-lg">Agregar</button>
</div>

@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    private IList<Promocion> promociones = new List<Promocion>();
    private Usuario user;
    private async Task CargarPromociones()
    {
        promociones = await Task.Run(() => promocionesServicio.Logica.GetPromociones());
        StateHasChanged();
    }

    private async Task<bool> CargarUsuario()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        var authenticationState = await customAuthStateProvider.GetAuthenticationStateAsync();
        string userEmail = "";
        await Task.Run(() => userEmail = authenticationState.User.FindFirst(ClaimTypes.Email)?.Value);

        if (string.IsNullOrEmpty(userEmail))
        {
            Console.WriteLine("ErrorAuth");
            return false;
        }
        else
        {
            await Task.Run(() =>
            {
                user = UsuarioServicios.Logica.GetUsuario(userEmail);
                Console.WriteLine("Usuario: " + userEmail);
            });
            return true;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (await CargarUsuario())
        {
            await Task.Run(() => promociones = promocionesServicio.Logica.GetPromociones());
        }
        else
        {
            NavigationManager.NavigateTo("/IniciarSesion", true);
        }
        
    }

    private async Task Agregar()
    {
        var messageForm = Modal.Show<ModalAgregarPromocion>("Agregar Promocion");
        var result = await messageForm.Result;
        await CargarPromociones();
        if (result.Data != null && result.Data.ToString() == "ErrorAuth")
        {
            NavigationManager.NavigateTo("/IniciarSesion", true);
        }
    }

    private async Task Borrar(Promocion promo)
    {
        var parameters = new ModalParameters().Add(nameof(ModalBorrar.promo), promo);
        var messageForm = Modal.Show<ModalBorrar>("Borrar Promocion", parameters);
        var result = await messageForm.Result;
        if (result.Data != null && result.Data.ToString() == "ErrorAuth")
        {
            NavigationManager.NavigateTo("/IniciarSesion", true);
        }
        await CargarPromociones();
    }

    private async Task Modificar(Promocion promo)
    {
        var parameters = new ModalParameters().Add(nameof(ModalEditarPromocion.promo), promo);
        var messageForm = Modal.Show<ModalEditarPromocion>("Editar Promocion", parameters);
        var result = await messageForm.Result;
        if (result.Data != null && result.Data.ToString() == "ErrorAuth")
        {
            NavigationManager.NavigateTo("/IniciarSesion", true);
        }
        await CargarPromociones();
    }
}
