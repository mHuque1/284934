@using Interfaz.Data
@using Microsoft.AspNetCore.Components.Web
@using Dominio
@using System.ComponentModel.DataAnnotations
@inject Promociones promociones
@inject Usuarios UsuarioServicios

<EditForm Model="@model" OnValidSubmit="Confirmar">
    <DataAnnotationsValidator />
    <div class="container">
        <div class="form-group">
            <label for="etiqueta">Etiqueta de la promoción:</label>
            <input type="text" class="form-control" id="etiqueta" @bind="model.Etiqueta" />
            <ValidationMessage For="@(() => model.Etiqueta)" />
        </div>

        <div class="form-group">
            <label for="descuento">Descuento de la promoción (%):</label>
            <input type="number" class="form-control" id="descuento" @bind="model.Descuento" step=".01" />
            <ValidationMessage For="@(() => model.Descuento)" />
        </div>

        <div class="form-group">
            <label for="fechaInicio">Fecha de inicio de la promoción:</label>
            <input type="date" class="form-control" id="fechaInicio" @bind="model.Comienzo" min="@DateTime.Today.ToString("yyyy-MM-dd")" />
            <ValidationMessage For="@(() => model.Comienzo)" />
        </div>

        <div class="form-group">
            <label for="fechaFin">Fecha de fin de la promoción:</label>
            <input type="date" class="form-control" id="fechaFin" @bind="model.Fin" min="@DateTime.Today.ToString("yyyy-MM-dd")" />
            <ValidationMessage For="@(() => model.Fin)" />
        </div>

        <!-- Mensaje de error -->
        @if (errorAgregarPromocion)
        {
            <div class="alert alert-danger" role="alert">
                Error al agregar la promocion.
            </div>
        }

        <br />
        <div class="form-group">
            <button type="submit" class="btn btn-primary btn-block">Confirmar</button>
        </div>
    </div>
</EditForm>

@code {
    private bool errorAgregarPromocion = false;
    private PromocionModel model = new PromocionModel();
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;
    Usuario user;
    private async Task Aceptar() => await BlazoredModal.CloseAsync(ModalResult.Ok());
    private async Task Cancelar() => await BlazoredModal.CancelAsync();
    private bool btnPresionado = false;

    private async Task Confirmar()
    {
        if (!btnPresionado)
        {
            btnPresionado = true;
            try {
                Promocion promocion = new(model.Etiqueta, model.Descuento, model.Comienzo, model.Fin);
                promociones.AddPromocion(promocion, UsuarioServicios.GetCurrentUser);
                await Aceptar();
                errorAgregarPromocion = false;
            }
            catch (Exception ex)
            {
                errorAgregarPromocion = true;
                Console.WriteLine(ex.ToString());
                btnPresionado = false;
            }


        }
    }

    public class PromocionModel
    {
        [Required(ErrorMessage = "La Etiqueta es obligatoria.")]
        [MaxLength(20, ErrorMessage = "La Etiqueta de Promocion no puede tener más de 20 caracteres.")]
        public string Etiqueta { get; set; } = "";

        [Required(ErrorMessage = "El Descuento es obligatorio.")]
        [Range(5.0, 75.0, ErrorMessage = "El Descuento debe estar entre 5 y 75.")]
        public double Descuento { get; set; } = 0.0;

        [Required(ErrorMessage = "La fecha de comienzo es obligatoria.")]
        [DateGreaterOrEqualThanToday(ErrorMessage = "La fecha de comienzo debe ser mayor o igual que el día actual.")]
        public DateTime Comienzo { get; set; } = DateTime.Today;

        [Required(ErrorMessage = "La fecha de fin es obligatoria.")]
        [DateGreaterOrEqualThanStart(ErrorMessage = "La fecha de fin debe ser mayor o igual que la fecha de comienzo.")]
        public DateTime Fin { get; set; } = DateTime.Today;
    }

    public class DateGreaterOrEqualThanToday : ValidationAttribute
    {
        public override bool IsValid(object value)
        {
            if (value is DateTime dateValue)
            {
                return dateValue.Date >= DateTime.Today;
            }

            return false;
        }
    }

    public class DateGreaterOrEqualThanStart : ValidationAttribute
    {
        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            var model = (PromocionModel)validationContext.ObjectInstance;

            if (value is DateTime dateValue && dateValue >= model.Comienzo)
            {
                return ValidationResult.Success;
            }

            return new ValidationResult(ErrorMessage ?? "La fecha de fin debe ser mayor o igual que la fecha de comienzo.", new[] { validationContext.MemberName });
        }
    }
}
